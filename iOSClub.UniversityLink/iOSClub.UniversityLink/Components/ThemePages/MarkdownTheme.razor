@page "/Theme/Markdown"
@using global::UniversityLink.DataModels
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<LinkContext> DbFactory
@inject IJSRuntime JS
@inject ModalService _modalService

<Flex Justify="center" Align="center">
    <div class="block">
        @foreach (var category in Categories)
        {
            <Flex Gap="10">
                <IconFont Style="font-size: 40px" Type="@($"icon-{category.Icon}")"/>
                <Title Level="2">@category.Name</Title>
            </Flex>
            @foreach (var link in category.Links)
            {
                @if (!isWeixin && link.Description == "微信打开")
                {
                    <a @onclick="() => QrCodeModalOpen(link)" target="_blank"
                       class="a-btn"
                       title="@link.Description">
                        <Flex Align="center" Justify="space-between">
                            <div>
                                <IconFont class="btn-title" Type="@($"icon-{link.Icon}")"/>
                                <span class="btn-title">@link.Name</span>
                            </div>
                            <span class="btn-description">@link.Description</span>
                        </Flex>
                    </a>
                }
                else
                {
                    <a href="@link.Url" target="_blank"
                       class="a-btn"
                       title="@link.Description">
                        <Flex Align="center" Justify="space-between">
                            <div>
                                <IconFont class="btn-title" Type="@($"icon-{link.Icon}")"/>
                                <span class="btn-title">@link.Name</span>
                            </div>
                            <span class="btn-description">@link.Description</span>
                        </Flex>
                    </a>
                }
            }

            <br/>
            <Divider/>
        }
    </div>
</Flex>

@code {
    private List<CategoryModel> Categories { get; set; } = [];
    private bool isWeixin;

    protected override async Task OnInitializedAsync()
    {
        if (Categories.Count != 0) return;
        await using var context = await DbFactory.CreateDbContextAsync();
        Categories = await context.Categories
            .Include(x => x.Links.OrderBy(y => y.Index))
            .OrderBy(x => x.Index)
            .ToListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        isWeixin = await JS.InvokeAsync<bool>("isWeiXin");
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task QrCodeModalOpen(LinkModel link)
    {
        await _modalService.CreateConfirmAsync<ConfirmTemplate, LinkModel, LinkModel>
            (new ConfirmOptions() { OkCancel = false }, link);
    }

}

<style>
    .block {
        width: 80%;
        margin-top: 45px;
        margin-bottom: 45px;
    }
    
    .ant-layout-content {
        background: #ffffff;
        overflow: auto;
        margin-top: 64px;
    }
    
    .a-btn{
        width: 100%;
    }

    .btn-title , .btn-description{
        font-size: 18px;
    }

    .Layout-Header {
        background: rgba(255, 255, 255);
        position: absolute;
        width: 100%;
        z-index: 1;
        top: 0;
        left: 0;
    }

    .Layout-Title {
        color: #1c1f23 !important;
    }
</style>