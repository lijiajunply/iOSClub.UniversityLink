@inherits LayoutComponentBase
@using System.Security.Claims
@using global::UniversityLink.DataModels
@using iOSClub.UniversityLink.Client.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<LinkContext> DbFactory
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager Nav

<Layout Style="height: 100vh">
    <Header Class="Layout-Header">
        <Flex Align="center" Justify="space-between" Style="width: 100%;">
            <a href="/">
                <Flex Gap="large">
                    <Image Src="iOS_Club_LOGO.png" Preview="false" Style="width:40px; height:40px"/>
                    <div class="Layout-Title">建大导航</div>
                </Flex>
            </a>
            <Popover Class="Layout-Popover">
                <TitleTemplate>
                    <Space Size="@("middle")">
                        <SpaceItem>
                            @if (Member.Identity != "Founder")
                            {
                                <Image Style="height: 60px;width: 60px" Preview="false"
                                       Src="@(Member.Gender == "男" ? "男生.png" : "女生.png")"/>
                            }
                            else
                            {
                                <Image Style="height: 60px;width: 60px" Preview="false" Src="iOS_Club_LOGO.png"/>
                            }
                        </SpaceItem>
                        <SpaceItem>
                            <span style="font-size: 22px;font-weight: bold">@Member.UserName</span>
                            <Paragraph Type="secondary">@Member.UserId</Paragraph>
                        </SpaceItem>
                    </Space>
                </TitleTemplate>
                <ContentTemplate>
                    @if (!string.IsNullOrEmpty(Member.UserId))
                    {
                        <Paragraph Type="secondary">
                            当前身份:@UserModel.IdentityDictionary[Member.Identity]
                        </Paragraph>
                        <Button Type="@ButtonType.Text" Block Danger OnClick="Logout">
                            退出登录
                        </Button>
                    }
                    else
                    {
                        <Button Type="@ButtonType.Link" Block OnClick="@(() => Nav.NavigateTo("/Login"))">
                            登录/注册
                        </Button>
                    }
                </ContentTemplate>
                <ChildContent>
                    <Button Type="@ButtonType.Text" OnClick="UserClick">
                        <Icon Type="user" Theme="outline" Class="Layout-Title"/>
                    </Button>
                </ChildContent>
            </Popover>
        </Flex>
    </Header>
    <Content>
        <CascadingValue Value="@Member">
            @Body
        </CascadingValue>
    </Content>
</Layout>

@code
{
    private UserModel Member { get; set; } = new() { UserName = "游客" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var name = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Name)?.Value;
            var identity = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value;
            var id = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(identity) || string.IsNullOrEmpty(id)) return;
            await using var context = await DbFactory.CreateDbContextAsync();
            var model = await context.Users.FirstOrDefaultAsync(x => x.UserId == id && x.UserName == name);

            if (model == null) return;

            Member = model;

            StateHasChanged();
        }
    
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Logout()
    {
        await ((Provider)authStateProvider).Logout();
        Member = new UserModel() { UserName = "游客" };
        Nav.Refresh();
    }

    private void UserClick() =>
        Nav.NavigateTo(string.IsNullOrEmpty(Member.UserId) ? "/Login" : 
            Member.Identity is "Founder" or "Manager" ? "/Centre" : "/LinkIcon",true);
}

<style>
    .Layout-Header {

    }

    .Layout-Title {
        font-size: 24px;
        font-weight: bold;
        color: #f3f5f7;
    }

    .Layout-Popover {
        border-radius: 10px;
    }

    .ant-popover-inner {
        border-radius: 12px;
        padding: 10px;
    }
</style>